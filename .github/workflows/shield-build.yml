name: TeamTwo.CloudShield.Shield
on:
  push:
    paths:
    - '**/src/**'
    - '.github/workflows/shield-build.yml'   
    - 'build/**'
  pull_request:
    paths:
    - '**/src/**'
    - '.github/workflows/shield-build.yml'   
jobs:
  build:
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: set environment variables
      uses: allenevans/set-env@v1.0.0
      with:
        TEAMTWO_CLOUDPROVIDERSOURCE: './src/CloudProvider/TeamTwo.CloudProvider.Management.sln'
        TEAMTWO_CUSTOMERMANAGEMENTSOURCE: './src/CustomerManagement/TeamTwo.Customer.Management.sln'
        TEAMTWO_DEMOSERVERSOURCE: './src/DemoServer/TeamTwo.CloudShield.DemoServer.sln'
        TEAMTWO_SHIELDSOURCE: './src/Shield/TeamTwo.CloudShield.Shield.sln'
        TEAMTWO_SHIELDCONTROLLERSOURCE: './src/ShieldController/TeamTwo.CloudShield.ShieldController.sln'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
   
    - name: Dotnet Sonarscanner tool installation
      run: dotnet tool install --global dotnet-sonarscanner --version 4.10.0
    - name: dotnet-reportgenerator-globaltool tool installation
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Install dependencies $TEAMTWO_CLOUDPROVIDERSOURCE
      run: dotnet restore $TEAMTWO_CLOUDPROVIDERSOURCE
    - name: Install dependencies $TEAMTWO_CUSTOMERMANAGEMENTSOURCE
      run: dotnet restore $TEAMTWO_CUSTOMERMANAGEMENTSOURCE
    - name: Install dependencies $TEAMTWO_DEMOSERVERSOURCE
      run: dotnet restore $TEAMTWO_DEMOSERVERSOURCE
    - name: Install dependencies $TEAMTWO_SHIELDSOURCE
      run: dotnet restore $TEAMTWO_SHIELDSOURCE
    - name: Install dependencies $TEAMTWO_SHIELDCONTROLLERSOURCE
      run: dotnet restore $TEAMTWO_SHIELDCONTROLLERSOURCE

    - name: Start SonarScanner for DotNet Core
      run: dotnet sonarscanner begin /d:sonar.host.url=https://sonarcloud.io /k:"HitzSPB_project_shield-poc" /o:"sonarcloud-hitzspb" /d:sonar.cs.opencover.reportsPaths="$GITHUB_WORKSPACE/coverlet/reports/Cobertura.xml" /d:sonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Build $TEAMTWO_CLOUDPROVIDERSOURCE
      run: dotnet build --configuration Release --no-restore $TEAMTWO_CLOUDPROVIDERSOURCE
    - name: Build $TEAMTWO_CUSTOMERMANAGEMENTSOURCE
      run: dotnet build --configuration Release --no-restore $TEAMTWO_CUSTOMERMANAGEMENTSOURCE
    - name: Build $TEAMTWO_DEMOSERVERSOURCE
      run: dotnet build --configuration Release --no-restore $TEAMTWO_DEMOSERVERSOURCE
    - name: Build $TEAMTWO_SHIELDSOURCE
      run: dotnet build --configuration Release --no-restore $TEAMTWO_SHIELDSOURCE
    - name: Build $TEAMTWO_SHIELDCONTROLLERSOURCE
      run: dotnet build --configuration Release --no-restore $TEAMTWO_SHIELDCONTROLLERSOURCE

    - name: Test $TEAMTWO_CLOUDPROVIDERSOURCE
      run: dotnet test $TEAMTWO_CLOUDPROVIDERSOURCE --no-restore --verbosity normal --collect "XPlat Code coverage"
    - name: Test $TEAMTWO_CUSTOMERMANAGEMENTSOURCE
      run: dotnet test $TEAMTWO_CUSTOMERMANAGEMENTSOURCE --no-restore --verbosity normal --filter Category=UnitTest --collect "XPlat Code coverage"
    - name: Test $TEAMTWO_DEMOSERVERSOURCE
      run: dotnet test $TEAMTWO_DEMOSERVERSOURCE --no-restore --verbosity normal --collect "XPlat Code coverage"
    - name: Test $TEAMTWO_SHIELDSOURCE
      run: dotnet test $TEAMTWO_SHIELDSOURCE --no-restore --verbosity normal --collect "XPlat Code coverage"
    - name: Test $TEAMTWO_SHIELDCONTROLLERSOURCE
      run: dotnet test $TEAMTWO_SHIELDCONTROLLERSOURCE --no-restore --verbosity normal --collect "XPlat Code coverage"

    - name: Generator CC Report
      run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:$GITHUB_WORKSPACE/coverlet/reports -reporttypes:"Cobertura" 
    - name: Stop SonarScanner for DotNet Core
      run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
